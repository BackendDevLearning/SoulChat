// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/google/wire"
	"gorm.io/gorm"
	"kratos-realworld/internal/biz"
	"kratos-realworld/internal/conf"
	"kratos-realworld/internal/data"
	"kratos-realworld/internal/data/user"
	"kratos-realworld/internal/model"
	"kratos-realworld/internal/model/infra"
	"kratos-realworld/internal/server"
	"kratos-realworld/internal/service"
)

// Injectors from wire.go:

func initApp(confServer *conf.Server, data *conf.Data, jwt *conf.JWT, logger log.Logger) (*CustomApp, func(), error) {
	db := infra.NewDatabase(data)
	client := infra.NewCache(data)
	modelData := model.NewData(db, client)
	userLogRepo := user.NewUserLogRepo(modelData, logger)
	conduitService := service.NewConduitService(userLogRepo, logger)
	httpServer := server.NewHTTPServer(confServer, jwt, conduitService, logger)
	grpcServer := server.NewGRPCServer(confServer, conduitService, logger)
	app := newApp(logger, httpServer, grpcServer)
	customApp := newCustomApp(app, db)
	return customApp, func() {
	}, nil
}

// wire.go:

type CustomApp struct {
	App *kratos.App // newApp 返回 *kratos.App
	DB  *gorm.DB    // data.ProviderSet 里面提供 *gorm.DB，用于在开发环境创建database和对应的table
}

func newCustomApp(kapp *kratos.App, db *gorm.DB) *CustomApp {
	return &CustomApp{
		App: kapp,
		DB:  db,
	}
}

var CustomProviderSet = wire.NewSet(model.ProviderSet, data.ProviderSet, biz.ProviderSet, service.ProviderSet, server.ProviderSet, newApp,
	newCustomApp,
)
