syntax = "proto3";

package realworld.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "kratos-realworld/api/conduit/v1;v1";

// The greeting service definition.
service Conduit {
  rpc Register(RegisterRequest) returns (RegisterReply) {
    option (google.api.http) = {
      post : "/api/users",
      body : "*",
    };
  }

  rpc Login(LoginRequest) returns (LoginReply) {
    option (google.api.http) = {
      post : "/api/users/login",
      body : "*",
    };
  }

  rpc UpdatePassword(UpdateRequest) returns (UpdateReply) {
    option (google.api.http) = {
      post:"/api/users/updatePassword",
      body: "*",
    };
  }

  rpc GetProfile(GetProfileRequest) returns (GetProfileReply) {
    option (google.api.http) = {
      get : "/api/profiles/{user_id}",
    };
  }

  rpc FollowUser(FollowUserRequest) returns (FollowFanReply) {
    option (google.api.http) = {
      post : "/api/profiles/{target_id}/follow",
      body : "*",
    };
  }

  rpc UnfollowUser(UnfollowUserRequest) returns (FollowFanReply) {
    option (google.api.http) = {
      post : "/api/profiles/{target_id}/unfollow",
      body : "*",
    };
  }

  rpc GetRelationship(RelationshipRequest) returns (RelationshipReply) {
    option (google.api.http) = {
      get : "/api/profiles/{target_id}/relationship",
    };
  }

  rpc CanAddFriend(CanAddFriendReq) returns(CanAddFriendRes) {
    option (google.api.http) = {
      post : "/api/profiles/{target_id}/canAddFriend",
      body : "*",
    };
  }
}

// NID_REGIDTER_REQ
message RegisterRequest {
  string username = 1;
  string phone = 2;
  string password = 3;
}

message RegisterReply {
  int32 code = 1;
  Res res = 2;
  string token = 3;
}

//NID_LOGIN_REQ
message LoginRequest {
  string phone = 1;
  string password = 2;
}

message LoginReply {
  int32 code = 1;  // 0=成功, 1=失败
  Res res = 2;  // 业务信息
  string token = 3;
}

//NID_UPDATE_REQ
message UpdateRequest {
  string phone = 1;
  string old_password = 2;
  string new_password = 3;
}

message UpdateReply {
  int32 code = 1;  // 0=成功, 1=失败
  Res res = 2;  // 业务信息
}


// Social 相关协议
// NID_GET_PROFILE_REQ
message ProfileData {
  uint32 user_id = 2;
  string tags = 3;
  uint32 follow_count = 4;
  uint32 fan_count = 5;

  uint32 view_count = 6;
  uint32 note_count = 7;
  uint32 received_like_count = 8;
  uint32 collected_count = 9;
  uint32 comment_count = 10;

  string last_login_ip = 11;
  google.protobuf.Timestamp last_active = 12;
  string status = 13;
}

// NID_GET_PROFILE_REQ
message GetProfileRequest { string user_id = 1; }

message GetProfileReply {
  int32 code = 1;
  Res res = 2;
  ProfileData data = 3;
}

// NID_FOLLOW_FAN_REQ
message FollowUserRequest { string target_id = 1; }

message UnfollowUserRequest { string target_id = 1; }

message FollowFanReply {
  int32 code = 1;
  Res res = 2;
  FollowFanData data = 3;
}

message FollowFanData {
  // 当前用户信息
  uint32 self_id = 1;
  uint32 follow_count = 2; // 我的关注数
  // 对方用户信息
  uint32 target_id = 3;
  uint32 fan_count = 4;    // 对方的粉丝数
}

message RelationshipRequest { string target_id = 1; }

message RelationshipReply {
  int32 code = 1;
  Res res = 2;
  RelationshipData data = 3;
}

message RelationshipData {
  bool is_following = 1;    // 当前用户是否已关注对方
  bool is_followed_by = 2;  // 当前用户是否被对方关注
  bool is_mutual = 3;       // 是否互相关注
  bool is_blocked = 4;      // 当前用户是否已拉黑对方
  bool is_blocked_by = 5;   // 当前用户是否被对方拉黑
  bool is_friend = 6;       // 是否是好友（如果互关=好友，可以合并，目前互关和好友不是等价的）
}

// NID_FRIENDS_REQ
message CanAddFriendReq { string target_id = 1; }

message CanAddFriendRes {
  int32 code = 1;
  Res res = 2;
  AddFriendRes data = 3;
}

message AddFriendRes {}


// 前端错误信息查看
// NID_Describe_Message
message Res {
  int32 code = 1;  // 业务状态码，例如 200、422
  string reason = 2;  // 原因
  string msg = 3;  // 详细描述信息
}




