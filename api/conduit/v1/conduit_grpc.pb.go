// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.1
// source: api/conduit/v1/conduit.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Conduit_Register_FullMethodName           = "/realworld.v1.Conduit/Register"
	Conduit_Login_FullMethodName              = "/realworld.v1.Conduit/Login"
	Conduit_UpdateUserPassword_FullMethodName = "/realworld.v1.Conduit/UpdateUserPassword"
	Conduit_UpdateUserInfo_FullMethodName     = "/realworld.v1.Conduit/UpdateUserInfo"
	Conduit_GetProfile_FullMethodName         = "/realworld.v1.Conduit/GetProfile"
	Conduit_FollowUser_FullMethodName         = "/realworld.v1.Conduit/FollowUser"
	Conduit_UnfollowUser_FullMethodName       = "/realworld.v1.Conduit/UnfollowUser"
	Conduit_GetRelationship_FullMethodName    = "/realworld.v1.Conduit/GetRelationship"
	Conduit_CanAddFriend_FullMethodName       = "/realworld.v1.Conduit/CanAddFriend"
)

// ConduitClient is the client API for Conduit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type ConduitClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	UpdateUserPassword(ctx context.Context, in *UpdateUserPwdRequest, opts ...grpc.CallOption) (*UpdateUserPwdReply, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoReply, error)
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileReply, error)
	FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowFanReply, error)
	UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*FollowFanReply, error)
	GetRelationship(ctx context.Context, in *RelationshipRequest, opts ...grpc.CallOption) (*RelationshipReply, error)
	CanAddFriend(ctx context.Context, in *CanAddFriendReq, opts ...grpc.CallOption) (*CanAddFriendRes, error)
}

type conduitClient struct {
	cc grpc.ClientConnInterface
}

func NewConduitClient(cc grpc.ClientConnInterface) ConduitClient {
	return &conduitClient{cc}
}

func (c *conduitClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, Conduit_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, Conduit_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) UpdateUserPassword(ctx context.Context, in *UpdateUserPwdRequest, opts ...grpc.CallOption) (*UpdateUserPwdReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserPwdReply)
	err := c.cc.Invoke(ctx, Conduit_UpdateUserPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserInfoReply)
	err := c.cc.Invoke(ctx, Conduit_UpdateUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileReply)
	err := c.cc.Invoke(ctx, Conduit_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowFanReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowFanReply)
	err := c.cc.Invoke(ctx, Conduit_FollowUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*FollowFanReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowFanReply)
	err := c.cc.Invoke(ctx, Conduit_UnfollowUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) GetRelationship(ctx context.Context, in *RelationshipRequest, opts ...grpc.CallOption) (*RelationshipReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelationshipReply)
	err := c.cc.Invoke(ctx, Conduit_GetRelationship_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) CanAddFriend(ctx context.Context, in *CanAddFriendReq, opts ...grpc.CallOption) (*CanAddFriendRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanAddFriendRes)
	err := c.cc.Invoke(ctx, Conduit_CanAddFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConduitServer is the server API for Conduit service.
// All implementations must embed UnimplementedConduitServer
// for forward compatibility.
//
// The greeting service definition.
type ConduitServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	UpdateUserPassword(context.Context, *UpdateUserPwdRequest) (*UpdateUserPwdReply, error)
	UpdateUserInfo(context.Context, *UpdateUserInfoRequest) (*UpdateUserInfoReply, error)
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileReply, error)
	FollowUser(context.Context, *FollowUserRequest) (*FollowFanReply, error)
	UnfollowUser(context.Context, *UnfollowUserRequest) (*FollowFanReply, error)
	GetRelationship(context.Context, *RelationshipRequest) (*RelationshipReply, error)
	CanAddFriend(context.Context, *CanAddFriendReq) (*CanAddFriendRes, error)
	mustEmbedUnimplementedConduitServer()
}

// UnimplementedConduitServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConduitServer struct{}

func (UnimplementedConduitServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedConduitServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedConduitServer) UpdateUserPassword(context.Context, *UpdateUserPwdRequest) (*UpdateUserPwdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPassword not implemented")
}
func (UnimplementedConduitServer) UpdateUserInfo(context.Context, *UpdateUserInfoRequest) (*UpdateUserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedConduitServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedConduitServer) FollowUser(context.Context, *FollowUserRequest) (*FollowFanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedConduitServer) UnfollowUser(context.Context, *UnfollowUserRequest) (*FollowFanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowUser not implemented")
}
func (UnimplementedConduitServer) GetRelationship(context.Context, *RelationshipRequest) (*RelationshipReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationship not implemented")
}
func (UnimplementedConduitServer) CanAddFriend(context.Context, *CanAddFriendReq) (*CanAddFriendRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanAddFriend not implemented")
}
func (UnimplementedConduitServer) mustEmbedUnimplementedConduitServer() {}
func (UnimplementedConduitServer) testEmbeddedByValue()                 {}

// UnsafeConduitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConduitServer will
// result in compilation errors.
type UnsafeConduitServer interface {
	mustEmbedUnimplementedConduitServer()
}

func RegisterConduitServer(s grpc.ServiceRegistrar, srv ConduitServer) {
	// If the following call pancis, it indicates UnimplementedConduitServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Conduit_ServiceDesc, srv)
}

func _Conduit_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_UpdateUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).UpdateUserPassword(ctx, req.(*UpdateUserPwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_UpdateUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_FollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).FollowUser(ctx, req.(*FollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_UnfollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).UnfollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_UnfollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).UnfollowUser(ctx, req.(*UnfollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_GetRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).GetRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_GetRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).GetRelationship(ctx, req.(*RelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_CanAddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanAddFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).CanAddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_CanAddFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).CanAddFriend(ctx, req.(*CanAddFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Conduit_ServiceDesc is the grpc.ServiceDesc for Conduit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Conduit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "realworld.v1.Conduit",
	HandlerType: (*ConduitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Conduit_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Conduit_Login_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _Conduit_UpdateUserPassword_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _Conduit_UpdateUserInfo_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _Conduit_GetProfile_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _Conduit_FollowUser_Handler,
		},
		{
			MethodName: "UnfollowUser",
			Handler:    _Conduit_UnfollowUser_Handler,
		},
		{
			MethodName: "GetRelationship",
			Handler:    _Conduit_GetRelationship_Handler,
		},
		{
			MethodName: "CanAddFriend",
			Handler:    _Conduit_CanAddFriend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/conduit/v1/conduit.proto",
}
