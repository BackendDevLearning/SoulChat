// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v6.31.0
// source: api/conduit/v1/conduit.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationConduitCanAddFriend = "/realworld.v1.Conduit/CanAddFriend"
const OperationConduitFollowUser = "/realworld.v1.Conduit/FollowUser"
const OperationConduitGetMessages = "/realworld.v1.Conduit/GetMessages"
const OperationConduitGetProfile = "/realworld.v1.Conduit/GetProfile"
const OperationConduitGetRelationship = "/realworld.v1.Conduit/GetRelationship"
const OperationConduitLogin = "/realworld.v1.Conduit/Login"
const OperationConduitRegister = "/realworld.v1.Conduit/Register"
const OperationConduitUnfollowUser = "/realworld.v1.Conduit/UnfollowUser"
const OperationConduitUpdateUserInfo = "/realworld.v1.Conduit/UpdateUserInfo"
const OperationConduitUpdateUserPassword = "/realworld.v1.Conduit/UpdateUserPassword"

type ConduitHTTPServer interface {
	CanAddFriend(context.Context, *CanAddFriendReq) (*CanAddFriendRes, error)
	FollowUser(context.Context, *FollowUserRequest) (*FollowFanReply, error)
	GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesReply, error)
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileReply, error)
	GetRelationship(context.Context, *RelationshipRequest) (*RelationshipReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	UnfollowUser(context.Context, *UnfollowUserRequest) (*FollowFanReply, error)
	UpdateUserInfo(context.Context, *UpdateUserInfoRequest) (*UpdateUserInfoReply, error)
	UpdateUserPassword(context.Context, *UpdateUserPwdRequest) (*UpdateUserPwdReply, error)
}

func RegisterConduitHTTPServer(s *http.Server, srv ConduitHTTPServer) {
	r := s.Route("/")
	r.POST("/api/users", _Conduit_Register0_HTTP_Handler(srv))
	r.POST("/api/users/login", _Conduit_Login0_HTTP_Handler(srv))
	r.POST("/api/users/updatePassword", _Conduit_UpdateUserPassword0_HTTP_Handler(srv))
	r.PUT("/api/users/updateUserInfo", _Conduit_UpdateUserInfo0_HTTP_Handler(srv))
	r.GET("/api/profiles/{user_id}", _Conduit_GetProfile0_HTTP_Handler(srv))
	r.POST("/api/profiles/{target_id}/follow", _Conduit_FollowUser0_HTTP_Handler(srv))
	r.POST("/api/profiles/{target_id}/unfollow", _Conduit_UnfollowUser0_HTTP_Handler(srv))
	r.GET("/api/profiles/{target_id}/relationship", _Conduit_GetRelationship0_HTTP_Handler(srv))
	r.POST("/api/profiles/{target_id}/canAddFriend", _Conduit_CanAddFriend0_HTTP_Handler(srv))
	r.GET("/api/chat", _Conduit_GetMessages0_HTTP_Handler(srv))
}

func _Conduit_Register0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_Login0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_UpdateUserPassword0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserPwdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitUpdateUserPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserPassword(ctx, req.(*UpdateUserPwdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserPwdReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_UpdateUserInfo0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitUpdateUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserInfo(ctx, req.(*UpdateUserInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_GetProfile0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProfileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitGetProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProfile(ctx, req.(*GetProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProfileReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_FollowUser0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitFollowUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FollowUser(ctx, req.(*FollowUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowFanReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_UnfollowUser0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnfollowUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitUnfollowUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnfollowUser(ctx, req.(*UnfollowUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowFanReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_GetRelationship0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RelationshipRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitGetRelationship)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRelationship(ctx, req.(*RelationshipRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RelationshipReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_CanAddFriend0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CanAddFriendReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitCanAddFriend)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CanAddFriend(ctx, req.(*CanAddFriendReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CanAddFriendRes)
		return ctx.Result(200, reply)
	}
}

func _Conduit_GetMessages0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMessagesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitGetMessages)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMessages(ctx, req.(*GetMessagesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMessagesReply)
		return ctx.Result(200, reply)
	}
}

type ConduitHTTPClient interface {
	CanAddFriend(ctx context.Context, req *CanAddFriendReq, opts ...http.CallOption) (rsp *CanAddFriendRes, err error)
	FollowUser(ctx context.Context, req *FollowUserRequest, opts ...http.CallOption) (rsp *FollowFanReply, err error)
	GetMessages(ctx context.Context, req *GetMessagesRequest, opts ...http.CallOption) (rsp *GetMessagesReply, err error)
	GetProfile(ctx context.Context, req *GetProfileRequest, opts ...http.CallOption) (rsp *GetProfileReply, err error)
	GetRelationship(ctx context.Context, req *RelationshipRequest, opts ...http.CallOption) (rsp *RelationshipReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	Register(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
	UnfollowUser(ctx context.Context, req *UnfollowUserRequest, opts ...http.CallOption) (rsp *FollowFanReply, err error)
	UpdateUserInfo(ctx context.Context, req *UpdateUserInfoRequest, opts ...http.CallOption) (rsp *UpdateUserInfoReply, err error)
	UpdateUserPassword(ctx context.Context, req *UpdateUserPwdRequest, opts ...http.CallOption) (rsp *UpdateUserPwdReply, err error)
}

type ConduitHTTPClientImpl struct {
	cc *http.Client
}

func NewConduitHTTPClient(client *http.Client) ConduitHTTPClient {
	return &ConduitHTTPClientImpl{client}
}

func (c *ConduitHTTPClientImpl) CanAddFriend(ctx context.Context, in *CanAddFriendReq, opts ...http.CallOption) (*CanAddFriendRes, error) {
	var out CanAddFriendRes
	pattern := "/api/profiles/{target_id}/canAddFriend"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConduitCanAddFriend))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConduitHTTPClientImpl) FollowUser(ctx context.Context, in *FollowUserRequest, opts ...http.CallOption) (*FollowFanReply, error) {
	var out FollowFanReply
	pattern := "/api/profiles/{target_id}/follow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConduitFollowUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConduitHTTPClientImpl) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...http.CallOption) (*GetMessagesReply, error) {
	var out GetMessagesReply
	pattern := "/api/chat"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConduitGetMessages))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConduitHTTPClientImpl) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...http.CallOption) (*GetProfileReply, error) {
	var out GetProfileReply
	pattern := "/api/profiles/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConduitGetProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConduitHTTPClientImpl) GetRelationship(ctx context.Context, in *RelationshipRequest, opts ...http.CallOption) (*RelationshipReply, error) {
	var out RelationshipReply
	pattern := "/api/profiles/{target_id}/relationship"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConduitGetRelationship))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConduitHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/api/users/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConduitLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConduitHTTPClientImpl) Register(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/api/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConduitRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConduitHTTPClientImpl) UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...http.CallOption) (*FollowFanReply, error) {
	var out FollowFanReply
	pattern := "/api/profiles/{target_id}/unfollow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConduitUnfollowUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConduitHTTPClientImpl) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...http.CallOption) (*UpdateUserInfoReply, error) {
	var out UpdateUserInfoReply
	pattern := "/api/users/updateUserInfo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConduitUpdateUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConduitHTTPClientImpl) UpdateUserPassword(ctx context.Context, in *UpdateUserPwdRequest, opts ...http.CallOption) (*UpdateUserPwdReply, error) {
	var out UpdateUserPwdReply
	pattern := "/api/users/updatePassword"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConduitUpdateUserPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
